<?xml version="1.0" encoding="UTF-8"?>

<spec role="editors-copy" xmlns:ex="http://expath.org/ns/xmlspec" ex:w3c="true">
   <header>
      <title>Binary Module</title>
      <w3c-designation>w3c-designation</w3c-designation>
      <w3c-doctype>EXPath Candidate Module</w3c-doctype>
      <pubdate>
         <day>31</day>
         <month>July</month>
         <year>2013</year>
      </pubdate>
      <publoc>
         <loc href="http://expath.org/spec/binary/editor"/>
      </publoc>
      <altlocs>
         <loc href="http://expath.org/spec/binary/editor.xml">XML</loc>
      </altlocs>
      <latestloc>
         <loc href="http://expath.org/spec/binary"/>
      </latestloc>

      <prevlocs>
         <loc href="http://expath.org/spec/binary/20130312"/>
      </prevlocs>

      <authlist>
         <author role="editor">
            <name>Jirka Kosek</name>
            <email href="mailto:jirka@kosek.cz">jirka@kosek.cz</email>
         </author>
         <author role="editor">
            <name>John Lumley</name>
            <email href="mailto:john@saxonica.com">john@saxonica.com</email>
         </author>
      </authlist>
      <copyright>
         <p>Copyright ©2013 Jirka Kosek and John Lumley, published by the <loc
               href="http://w3.org/community/expath/">EXPath Community Group</loc> under the <loc
               href="https://www.w3.org/community/about/agreements/cla/">W3C Community Contributor
               License Agreement (CLA)</loc>. A human-readable <loc
               href="http://www.w3.org/community/about/agreements/cla-deed/">summary</loc> is
            available.</p>
         <p>This specification was published by the <loc href="http://www.w3.org/community/expath/"
               >EXPath Community Group</loc>. It is not a W3C Standard nor is it on the W3C
            Standards Track. Please note that under the <loc
               href="http://www.w3.org/community/about/agreements/cla/">W3C Community Contributor
               License Agreement (CLA)</loc> there is a limited opt-out and other conditions apply.
            Learn more about <loc href="http://www.w3.org/community/">W3C Community and Business
               Groups</loc>.</p>
      </copyright>
      <abstract>
         <p>This proposal provides an API for XPath 2.0 to handle binary data. It defines extension
            functions to process data from binary files, including subsequencing, searching, basic
            binary operations and conversion between binary and structured forms. It has been
            designed to be compatible with XQuery 1.0 and XSLT 2.0, as well as any other XPath 2.0
            usage.</p>
      </abstract>
      <status>
         <p/>
      </status>
      <langusage>
         <language>en-US</language>
      </langusage>
      <revisiondesc>
         <p>revisiondesc</p>
      </revisiondesc>
   </header>
   <body>
      <div1 id="status">
         <head>Status of this document</head>
         <p>This document is in an interim draft stage. Comments are welcomed at <loc
               href="mailto:public-expath@w3.org">public-expath@w3.org</loc> mailing list (<loc
               href="http://lists.w3.org/Archives/Public/public-expath/">archive</loc>).</p>
      </div1>
      <div1 id="introduction">
         <head>Introduction</head>
         <div2>
            <head>Namespace Conventions</head>
            <p>The module defined by this document defines several functions, all contained in the
               namespace <code>http://expath.org/ns/binary</code>. In this document, the
                  <code>bin</code> prefix, when used, is bound to this namespace URI.</p>
            <p>Error codes are defined in the namespace <code>http://expath.org/ns/error</code>. In
               this document, the <code>err</code> prefix, when used, is bound to this namespace
               URI.</p>
            <p>Binary file I/O uses facilities defined in the <loc
                  href="http://expath.org/spec/file">EXPath File Module</loc>, which defines
               functions in the namespace <code>http://expath.org/ns/file</code>. In this document,
               the <code>file</code> prefix, when used, is bound to this namespace URI.</p>
         </div2>
         <div2>
            <head>Error management</head>
            <p>Error conditions are identified by a code (a <code>QName</code>.) When such an error
               condition is reached in the evaluation of an expression, a dynamic error is thrown,
               with the corresponding error code (as if the standard XPath function
                  <code>error()</code> had been called.)</p>
         </div2>
         <div2 id="type">
            <head>Binary type</head>
            <p>The principal binary type within this module is <code>xs:base64Binary</code>.</p>
            <p>Conversion to and from <code>xs:hexBinary</code> can be performed by casting with
                  <ex:function>xs:hexBinary()</ex:function> and
                  <ex:function>xs:base64Binary()</ex:function>.</p>
            <note>
               <p>As these types are normally implemented as wrappers around byte array structures
                  containing the data, and differ only when being serialized to or parsed from text,
                  such casting in-process should not involve data copying.</p>
            </note>
         </div2>
      </div1>
      <div1 id="use-cases">
         <head>Use cases</head>
         <p>Development of this specification was driven by requirements which some XML developers
            regularly encounter in examining or generating data which is presented in binary, or
            other non-textual forms. Some typical use cases include:</p>
         <ulist>
            <item>
               <p>Getting the dimensions of an image file.</p>
            </item>
            <item>
               <p>Extracting image metadata.</p>
            </item>
            <item>
               <p>Processing images embedded as base64 encodings within a SOAP message.</p>
            </item>
            <item>
               <p>Processing legacy text files which use different encodings in separate
                  sections.</p>
            </item>
            <item>
               <p>Generating PDF files from SVG graphical data.</p>
            </item>
         </ulist>
         <div2 id="example-JPEG">
            <head>Example – finding JPEG size</head>
            <p>As an example, the following code reads the binary form of a JPEG image file,
               searches for the 'Start of Frame/DCT' segment, and unpacks the relevant binary
               sections to integers of height and width:</p>
            <eg xml:space="preserve"><![CDATA[
<xsl:variable name="binary" select="file:read-binary(@href)" as="xs:base64Binary"/>
<xsl:variable name="location" select="bin:find($binary,0,bin:hex('FFC0'))"/>
<size width="{bin:unpack-unsigned-integer($binary,$location+5,2,'most-significant-first')}"
      height="{bin:unpack-unsigned-integer($binary,$location+7,2,'most-significant-first')}"/>
               
      => <size width="377" height="327"/>]]></eg>
            <p>(The <code>'most-significant-first'()</code> argument ensures the numeric conversion
               is 'big-endian', which is the format in JPEG.)</p>
         </div2>
         <div2 id="example-ASN1">
            <head>Example – reading and writing variable length ASN.1 integers</head>
            <p><bibref ref="asn1"/> defines several formats for identifying and encoding
               arbitrary-sized telecommunications data as streams of octets. Many of these forms
               specify the length of data as part of their encoding. For example, in the Basic
               Encoding Rules, an integer is represented as the following series of octets:</p>
            <ulist>
               <item>
                  <p>Type – 1 octet – in this case the value <code>0x02</code></p>
               </item>
               <item>
                  <p>Length – &gt;=1 octet – the number of octets in the integer value. The length
                     field itself can be variable in length – to accomodate VERY large integers
                     (requiring more than 127 octets to represent, e.g. 2048-bit crypto keys.)</p>
               </item>
               <item>
                  <p>Payload – &gt;=0 octets – the octets of the integer value in
                     most-significant-first order.</p>
               </item>
            </ulist>
            <p>To generate such a representation for an integer from XSLT/XPath, the following code
               might be used:</p>
            <eg xml:space="preserve"><![CDATA[
 <xsl:function name="bin:int-octets" as="xs:integer*">
    <xsl:param name="value" as="xs:integer"/>
    <xsl:sequence
            select="if($value ne 0) then (bin:int-octets($value idiv 256),$value mod 256) else ()"/>
 </xsl:function>
 <xsl:function name="bin:encode-ASN-integer" as="xs:base64Binary">
     <xsl:param name="int" as="xs:integer"/>
     <xsl:variable name="octets" select="bin:int-octets($int)"/>
     <xsl:variable name="length-octets"
         select="let $l := count($octets) return
         (if($l le 127) then $l 
         else (let $lo := bin:int-octets($l) return (128+count($lo),$lo)))"/>
     <xsl:sequence select="bin:from-octets((2,$length-octets,$octets))"/>
 </xsl:function>]]></eg>
            <p>The function <code>bin:octets()</code> returns a sequence of all the 'significant'
               octets of the integer (i.e. eliminating leading 'zeroes') in most-significant order.
               Examples of the encoding are: </p>
            <eg xml:space="preserve"><![CDATA[
 bin:encode-ASN-integer(0) => "AgA="
 bin:encode-ASN-integer(1234) => "AgIE0g=="
 bin:encode-ASN-integer(123456789123456789123456789123456789) => "Ag8XxuPAMviQRa10ZoQEXxU="
               
 bin:encode-ASN-integer(123456789.. 900 digits... 123456789) => "AoIBdgaTo....EBF8V"]]></eg>
            <p>The first example requires no octets to encode zero, hence its octets are
                  <code>2,0</code>. Both the second and third examples can be represented in less
               than 128 octets (2 and 15 respectively), so length is encoded as a single octet. The
               first three octets of the result for the last example, which encodes a 900-digit
               integer, are: <code>2,130,1</code> indicating that the data is represented by
               (130-128) * 256 + 1 = 513 octets and the length required two octets to encode.</p>
            <p>Decoding is a matter of compound use of the integer decoding function:</p>
            <eg xml:space="preserve"><![CDATA[
 <xsl:function name="bin:decode-ASN-integer" as="xs:integer">
     <xsl:param name="in" as="xs:base64Binary"/>
     <xsl:sequence
         select="let $lo := bin:unpack-unsigned-integer($in,1,1,'BE') return (
         if($lo le 127) then bin:unpack-unsigned-integer($in,2,$lo,'BE') 
            else (let $lo2 := $lo - 128, $lo3 := bin:unpack-unsigned-integer($in,2,$lo2,'BE') return
            bin:unpack-unsigned-integer($in,2+$lo2,$lo3,'BE')))"
      />
 </xsl:function>               ]]></eg>
            <p>(all numbers in ASN are 'big-endian') and the examples from above reverse:</p>
            <eg xml:space="preserve"><![CDATA[
 bin:decode-ASN-integer(xs:base64Binary("AgA=")) => 0
 bin:decode-ASN-integer(xs:base64Binary("AgIE0g==")) => 1234
 bin:encode-ASN-integer(xs:base64Binary("Ag8XxuPAMviQRa10ZoQEXxU=")) 
     => 123456789123456789123456789123456789              
 bin:encode-ASN-integer(xs:base64Binary("AoIBdgaTo....EBF8V")) 
     =>123456789.. 900 digits... 123456789                ]]></eg>
         </div2>
      </div1>
      <div1 id="loading">
         <head>Loading and saving binary data</head>
         <p>This module defines no specific functions for reading and writing binary data from
            files. The EXPath File Module <bibref ref="expathfile"/> provides three suitable
            functions:</p>
         <ulist>
            <item>
               <p>
                  <ex:function><a href="http://expath.org/spec/file#d3e541"
                     >file:append-binary</a></ex:function>($file as <ex:type>xs:string</ex:type>,
                  $value as <ex:type>xs:base64Binary</ex:type>) as
                     <ex:type>empty-sequence()</ex:type>. Appends a Base64 item as binary to a
                  file.</p>
            </item>
            <item>
               <p>
                  <ex:function><a href="http://expath.org/spec/file#d3e954"
                     >file:read-binary</a></ex:function>($file as <ex:type>xs:string</ex:type>) as
                     <ex:type>xs:base64Binary</ex:type>. Returns the content of a file in its Base64
                  representation.</p>
            </item>
            <item>
               <p>
                  <ex:function><a href="http://expath.org/spec/file#d3e1359"
                     >file:write-binary</a></ex:function>($file as <ex:type>xs:string</ex:type>,
                  $value as <ex:type>xs:base64Binary</ex:type>) as
                     <ex:type>empty-sequence()</ex:type>. Writes a Base64 item as binary to a file.
               </p>
            </item>
         </ulist>
         <p>There may be an argument for a positioned file:read-binary($file as
               <ex:type>xs:string</ex:type>,$offset as <ex:type>xs:integer</ex:type>), for access
            into large files without total read.</p>
      </div1>

      <div1 id="constants">
         <head>Defining 'constants' and conversions</head>
         <p>Users of the package may need to define binary 'constants' within their code or examine
            the basic octets. The following functions support these:</p>
         <div2 id="hex">
            <head><?function bin:hex?></head>
         </div2>
         <div2 id="binary">
            <head><?function bin:bin?></head>
         </div2>
         <div2 id="octal">
            <head><?function bin:octal?></head>
         </div2>
         <div2 id="to-octets">
            <head><?function bin:to-octets?></head>
         </div2>
         <div2 id="from-octets">
            <head><?function bin:from-octets?></head>
         </div2>
      </div1>

      <div1 id="basic-operations">
         <head>Basic operations</head>
         <div2 id="length">
            <head><?function bin:length?></head>
         </div2>
         <div2 id="subsequence">
            <head><?function bin:subsequence?></head>
         </div2>
         <div2 id="join">
            <head><?function bin:join?></head>
         </div2>
         <div2 id="pad-left">
            <head><?function bin:pad-left?></head>
         </div2>
         <div2 id="pad-right">
            <head><?function bin:pad-right?></head>
         </div2>
         <div2 id="index-of">
            <head><?function bin:find?></head>
         </div2>

      </div1>

      <div1 id="text-encoding">
         <head>Text decoding and encoding</head>
         <div2 id="decode-string">
            <head><?function bin:decode-string?></head>
         </div2>
         <div2 id="encode-string">
            <head><?function bin:encode-string?></head>
         </div2>
      </div1>

      <div1 id="numeric-packing">
         <head>Packing and unpacking of encoded numeric values</head>
         <div2 id="endianness">
            <head>Number 'endianness'</head>
            <p>Packing and unpacking numeric values can be performed in 'most-significant-first'
               ('big-endian') or 'least-significant-first' ('little-endian') octet order. The
               default is 'least-significant-first'. The functions have an optional parameter
                  <code>$octet-order</code> whose string value controls the order.
               Least-significant-first order is indicated by any of the values
                  <code>least-significant-first</code>, <code>little-endian</code> or
                  <code>LE</code>. Most-significant-first order is indicated by any of the strings
                  <code>most-significant-first</code>, <code>big-endian</code> or
               <code>BE</code>.</p>
         </div2>
         <div2 id="integer">
            <head>Integer representation</head>
            <p/>
            <p>Integers within binary data are represented, or assumed to be represented, as an
               integral number of octets. Integers where <code>$length</code> is greater than 8
               octets (and thus not representable as a <code>long</code>) might be expected in some
               situations, e.g. encryption. Whether the range of integers is limited to
                  <code>±2^63</code> may be implementation-dependant.</p>
         </div2>
         <div2 id="floating">
            <head>Representation of floating point numbers</head>
            <p>Care should be taken with the packing and unpacking of floating point numbers
                  (<code>xs:float</code> and <code>xs:double</code>). The binary representations are
               expected to correspond with those of the IEEE single/double-precision 32/64-bit
               floating point types <bibref ref="ieee754"/>. Consequently they will occupy 4 or 8
               octets when packed.</p>
            <p>Positive and negative infinities are supported. <code>INF</code> maps to <code>0x7f80
                  0000</code> (float), <code>0x7ff0 0000 0000 0000</code> (double).
                  <code>-INF</code> maps to <code>0xff80 0000</code> (float), <code>0xfff0 0000 0000
                  0000</code> (double).</p>
            <p>Unlike <bibref ref="ieee754"/>, <bibref ref="xmlschema2"/> provides only one form of
               zero and one form of NaN. Consequently negative zero (<code>0x8000 0000 0000
                  0000</code> double, <code>0x8000 0000</code> float) encountered during unpacking
               will yield positive zero forms (i.e. all zeroes), and negative zeros will never be
               written as a result of packing.</p>
            <p>The NaN of <bibref ref="xmlschema2"/> corresponds to a 'quiet' NaN with zero payload
               of <bibref ref="ieee754"/> with forms <code>0x7fc0 0000</code> (float), <code>0x7ff8
                  0000 0000 0000</code> (double). These are the bit forms that will be packed.
               'Signalling' NaN values (<code>0x7f80 0001</code> -&gt; <code>0x7fbf ffff</code> or
                  <code>0xff80 0001</code> -&gt; <code>0xffbf ffff</code>, <code>0x7ff0 0000 0000
                  0001</code> -&gt; <code>0x7ff7 ffff ffff ffff</code> or <code>0xfff0 0000 0000
                  0001</code> -&gt; <code>0xfff7 ffff ffff ffff</code>) encountered during unpacking
               will be replaced by 'quiet' NaN. Any low-order payload in a unpacked quiet NaN is
               also zeroed. </p>
         </div2>
         <div2 id="pack-double">
            <head><?function bin:pack-double?></head>
         </div2>
         <div2 id="pack-float">
            <head><?function bin:pack-float?></head>
         </div2>
         <div2 id="pack-integer">
            <head><?function bin:pack-integer?></head>
         </div2>
         <div2 id="unpack-double">
            <head><?function bin:unpack-double?></head>
         </div2>
         <div2 id="unpack-float">
            <head><?function bin:unpack-float?></head>
         </div2>
         <div2 id="unpack-signed-integer">
            <head><?function bin:unpack-signed-integer?></head>
         </div2>
         <div2 id="unpack-unsigned-integer">
            <head><?function bin:unpack-unsigned-integer?></head>
         </div2>
      </div1>

      <div1 id="bitwise">
         <head>Bitwise operations</head>
         <div2 id="or">
            <head><?function bin:or?></head>
         </div2>
         <div2 id="xor">
            <head><?function bin:xor?></head>
         </div2>
         <div2 id="and">
            <head><?function bin:and?></head>
         </div2>
         <div2 id="not">
            <head><?function bin:not?></head>
         </div2>
         <div2 id="shift">
            <head><?function bin:shift?></head>
         </div2>
      </div1>

   </body>

   <back>
      <div1 id="references">
         <head>References</head>
         <blist>

            <bibl id="expathfile" key="EXPathFile">
               <loc href="http://expath.org/spec/file">File Module</loc>. Christian Grün and
               Matthias Brantner, editors. EXPath Candidate Module. 14 June 2012.</bibl>
            <bibl id="fo11" key="F&amp;O 1.1">
               <loc href="http://www.w3.org/TR/xpath-functions-11/">XPath and XQuery Functions and
                  Operators 1.1</loc>. Michael Kay, editor. W3C Working Draft. 15 January
               2009.</bibl>
            <bibl id="xmlschema2" key="XML Schema 2">
               <loc href="http://www.w3.org/TR/xmlschema-2/">XML Schema Part 2: Datatypes Second
                  Edition.</loc>. Paul V. Biron &amp; Ashok Malhotra, editors. W3C W3C
               Recommendation. 28 October 2004.</bibl>
            <bibl id="ieee754" key="IEEE 754-1985">IEEE Standard for Binary Floating-Point
               Arithmetic. See <loc
                  href="http://standards.ieee.org/reading/ieee/std_public/description/busarch/754-1985_desc.html"
                  >http://standards.ieee.org/reading/ieee/std_public/description/busarch/754-1985_desc.html</loc></bibl>
            <bibl id="asn1" key="ASN.1"> OSI networking and system aspects – Abstract Syntax
               Notation One (ASN.1) – see <loc
                  href="http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf">ASN.1
                  encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding
                  Rules (CER) and Distinguished Encoding Rules (DER) </loc>. ITU-T X.690 (07/2002) </bibl>
            <!--<bibl id="xslt20" key="XSLT 2.0">
               <loc href="http://www.w3.org/TR/xslt20/">XSL Transformations (XSLT) Version
               2.0</loc>. Michael Kay, editor. W3C Recommendation. 23 January 2007. </bibl>-->
         </blist>
      </div1>
      <div1 id="errors">
         <head>Summary of Error Conditions</head>
         <blist>
            <bibl id="error.differentLengthArguments" key="err:BINA0001">The arguments to a bitwise
               operation are differing lengths.</bibl>
            <bibl id="error.offsetNegative" key="err:BINA0002">Attempting to retrieve data before
               the start of a binary data type.</bibl>
            <bibl id="error.offsetBeyondEnd" key="err:BINA0003">Attempting to retrieve data beyond
               the end of a binary data type.</bibl>
            <bibl id="error.sizeNegative" key="err:BINA0004">Size of binary portion, required
               numeric size or padding is negative.</bibl>
            <bibl id="error.emptySearch" key="err:BINA0005">Binary search item is empty.</bibl>
            <bibl id="error.largeOctet" key="err:BINA0006">Attempting to pack binary value with
               octet outside range.</bibl>
            <bibl id="error.nonNumberChar" key="err:BINA0007">Wrong character in binary 'numeric
               constructor' string.</bibl>
            <bibl id="error.encoding" key="err:BINA0008">The specified encoding is not
               supported.</bibl>
            <bibl id="error.endianness" key="err:BINA0009">Unknown octet-order value.</bibl>
         </blist>
      </div1>
   </back>
</spec>
