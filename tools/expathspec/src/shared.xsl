<?xml version="1.0" encoding="UTF-8"?>

<!--
   Home for the XML Spec format: http://www.w3.org/2002/xmlspec/
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://www.w3.org/1999/xhtml"
                xmlns:spec="http://expath.org/ns/xmlspec"
                exclude-result-prefixes="#all"
                version="2.0">

   <!--
       TODO: Add support for syntax highlighting when specs contain code snippets...
       
       <script type="text/javascript" src="/scripts/XRegExp.js"/>
       <script type="text/javascript" src="/scripts/shCore.js"/>
       <script type="text/javascript" src="/scripts/shBrushXml.js"/>
       <script type="text/javascript" src="/scripts/shBrushXQuery.js"/>
       <link rel="stylesheet" type="text/css" href="/style/shCore.css"/>
       <link rel="stylesheet" type="text/css" href="/style/shThemeDefault.css"/>
       <script type="text/javascript">SyntaxHighlighter.all();</script>
   -->

   <xsl:output method="xhtml"/>

   <xsl:param name="analytics-id" select="'UA-5463082-2'"/>
   <xsl:param name="offline" select="false()"/>

   <xsl:variable name="base-css"         select="'https://www.w3.org/StyleSheets/TR/base.css'"/>
   <xsl:variable name="base-css-offline" select="'../../process/xmlspec/base.css'"/>

   <xsl:variable name="final-spec"   select="/spec/@role eq 'spec'"/>
   <xsl:variable name="logo"         select="
       if ( $final-spec ) then
         'http://expath.org/images/logo-module.png'
       else 
         'http://expath.org/images/logo-candidate.png'"/>
   <xsl:variable name="logo-offline" select="
       if ( $final-spec ) then
         '../../website/src/images/logo-module.png'
       else 
         '../../website/src/images/logo-candidate.png'"/>

   <xsl:variable name="is-w3c" select="/spec/@spec:w3c/xs:boolean(.)"/>

   <!-- Setup post-processing (second pass over the result generated by the W3C stylesheet). -->
   <xsl:template match="/">
      <xsl:variable name="res" as="item()*">
         <xsl:next-match/>
      </xsl:variable>
      <xsl:apply-templates select="$res" mode="postproc"/>
   </xsl:template>

   <!-- Ignore status. -->
   <xsl:template match="status"/>

   <!-- Original stylesheet ignores subtitle (a bug IMHO.) -->
   <xsl:template match="subtitle">
      <xsl:apply-templates/>
   </xsl:template>

   <!-- Put < and > outside of the link. -->
   <xsl:template match="email">
      <xsl:text> </xsl:text>
      <xsl:text>&lt;</xsl:text>
      <a href="{@href}">
         <xsl:apply-templates/>
      </a>
      <xsl:text>&gt;</xsl:text>
   </xsl:template>

   <!-- Make each link in prevlocs appears on its own line -->
   <xsl:template match="publoc/loc|latestloc/loc|prevlocs/loc">
      <xsl:next-match/>
      <br/>
   </xsl:template>

   <!-- override... -->
   <xsl:template match="authlist">
      <xsl:variable name="editors"  select="author[@role eq 'editor']" as="element()+"/>
      <xsl:variable name="contribs" select="author[@role eq 'contrib']"/>
      <dt>
         <xsl:text>Editor</xsl:text>
         <xsl:if test="exists($editors[2])">
            <xsl:text>s</xsl:text>
         </xsl:if>
         <xsl:text>:</xsl:text>
      </dt>
      <xsl:apply-templates select="$editors"/>
      <xsl:if test="exists($contribs)">
         <dt>
            <xsl:text>Contributor</xsl:text>
            <xsl:if test="exists($contribs[2])">
               <xsl:text>s</xsl:text>
            </xsl:if>
            <xsl:text>:</xsl:text>
         </dt>
         <xsl:apply-templates select="$contribs"/>
      </xsl:if>
   </xsl:template>

   <!-- Add an empty anchor if KW has an @id... -->
   <xsl:template match="kw[@id]">
      <a id="{ @id }" name="{ @id }"/>
      <xsl:next-match/>
   </xsl:template>

   <!-- ...and allows it to be used in a specref (to simulate a linkable formalpara). -->
   <xsl:template match="specref">
      <xsl:param name="target" select="key('ids', @ref)[1]"/>
      <xsl:choose>
         <xsl:when test="$target instance of element(kw)">
            <xsl:apply-templates select="$target" mode="specref"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:next-match/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="kw" mode="specref">
      <a>
         <xsl:attribute name="href">
            <xsl:call-template name="href.target"/>
         </xsl:attribute>
         <b>
            <xsl:variable name="div" select="
                ancestor::*[local-name(.) = ('div1', 'div2', 'div3', 'div4', 'div5')][1]"/>
            <xsl:apply-templates select="$div" mode="divnum"/>
            <xsl:apply-templates select="$div/head" mode="text"/>
            <xsl:text> (</xsl:text>
            <xsl:apply-templates select="." mode="text"/>
            <xsl:text>)</xsl:text>
         </b>
      </a>
   </xsl:template>

   <!-- EXPath specifics... -->
   <xsl:template match="spec:function">
      <code class="function">
         <xsl:apply-templates/>
      </code>
   </xsl:template>

   <xsl:template match="spec:type">
      <code class="type">
         <xsl:apply-templates/>
      </code>
   </xsl:template>

   <!--
      Mode: postproc
      Post-process the original output, based on the Modified Identity
      design pattern.
   -->

   <!-- by default, shallow copy and recurse -->
   <xsl:template match="node()" mode="postproc">
      <xsl:copy>
         <xsl:copy-of select="@*"/>
         <xsl:apply-templates select="node()" mode="postproc"/>
      </xsl:copy>
   </xsl:template>

   <!-- move the link elements right after title (to be before style)
        dunno why, but if not the display is messed up-->
   <xsl:template match="h:html/h:head" mode="postproc">
      <xsl:copy>
         <xsl:copy-of select="@*"/>
         <xsl:apply-templates select="node() except h:link" mode="postproc"/>
      </xsl:copy>
   </xsl:template>

   <xsl:template match="h:head/h:title" mode="postproc">
      <xsl:copy>
         <xsl:copy-of select="@*"/>
         <xsl:apply-templates select="node()" mode="postproc"/>
      </xsl:copy>
      <xsl:apply-templates select="../h:link" mode="postproc"/>
   </xsl:template>

   <!-- if offline, use the cached CSS -->
   <xsl:template match="h:head/h:link[$offline][@href eq $base-css]" mode="postproc">
      <xsl:copy>
         <xsl:copy-of select="@* except @href"/>
         <xsl:attribute name="href" select="$base-css-offline"/>
         <xsl:apply-templates select="node()" mode="postproc"/>
      </xsl:copy>
   </xsl:template>

   <!-- add the EXPath logo -->
   <xsl:template match="h:div[@class eq 'head']" mode="postproc">
      <p>
         <xsl:choose>
            <xsl:when test="$is-w3c">
               <a href="http://w3.org/">
                  <img src="http://w3.org/Icons/w3c_home"
                       alt="W3C" height="48" width="72"/>
               </a>
            </xsl:when>
            <xsl:otherwise>
               <a href="http://expath.org/">
                  <img src="http://expath.org/images/expath-logo.png"
                       alt="EXPath" height="32" width="32"/>
               </a>
            </xsl:otherwise>
         </xsl:choose>
      </p>
      <xsl:next-match/>
   </xsl:template>

   <!-- add the Google Analytics code snippets at the end of the document body -->
   <xsl:template match="h:html/h:body[exists($analytics-id)]" mode="postproc">
      <xsl:copy>
         <xsl:copy-of select="@*"/>
         <xsl:apply-templates select="node()" mode="postproc"/>
         <script type="text/javascript">
            var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
            document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
         </script>
         <script type="text/javascript">
            try {
               var pageTracker = _gat._getTracker("<xsl:value-of select="$analytics-id"/>");
               pageTracker._trackPageview();
            } catch(err) {}
         </script>
      </xsl:copy>
   </xsl:template>

</xsl:stylesheet>
